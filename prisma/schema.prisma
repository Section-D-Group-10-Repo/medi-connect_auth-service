generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  PATIENT
  DOCTOR
  ADMIN
  PENDING
}

enum Gender {
  MALE
  FEMALE
}

enum APPOINTMENT_STATUS {
  PENDING
  CANCELED
  CONFIRMED
  COMPLETED
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String // Hashed password
  firstName   String
  lastName    String
  phoneNumber String   @unique
  admin       Admin?
  patient     Patient?
  doctor      Doctor?
  role        Role
}

model Admin {
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Patient {
  userId       String        @unique
  user         User          @relation(fields: [userId], references: [id])
  dateOfBirth  DateTime
  gender       Gender
  flagId       String        @unique
  flag         Flag          @relation(fields: [flagId], references: [id])
  appointments Appointment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Doctor {
  userId            String           @unique
  user              User             @relation(fields: [userId], references: [id])
  gender            Gender
  specializations   String[] //  ["Cardiology", "Pediatrics"]
  qualifications    String[] // ["MBBS", "MD", "Fellowship in Cardiology"]
  certifications    String[]
  yearsOfExperience Int
  profileImageUrl   String?
  bio               String?
  availableHours    AvailableHours[]
  flagId            String           @unique
  flag              Flag             @relation(fields: [flagId], references: [id])
  appointments      Appointment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AvailableHours {
  id        String   @id @default(cuid())
  dayOfWeek String
  startTime DateTime
  endTime   DateTime
  doctor    Doctor?  @relation(fields: [doctorId], references: [userId])
  doctorId  String?  @unique

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Flag {
  id          String   @id @default(cuid())
  isSuspended Boolean  @default(false)
  patients    Patient?
  doctors     Doctor?
}

model Appointment {
  id        String             @id @default(cuid())
  status    APPOINTMENT_STATUS @default(PENDING)
  patientId String
  patient   Patient            @relation(fields: [patientId], references: [userId])
  doctorId  String
  doctor    Doctor             @relation(fields: [doctorId], references: [userId])
}


